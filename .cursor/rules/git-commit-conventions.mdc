---
description: Git提交规范和最佳实践
globs: ["**/*"]
alwaysApply: true
---

# Git 提交规范

当用户要求进行Git操作时，AI助手应该遵循以下规范：

## 1. 提交消息格式

### 标准范式
```
<行为类型>(<范围>): <描述>

[可选的正文]

[可选的脚注]
```

### 行为类型 (type)
- `feat`: 新功能
- `fix`: 修复bug
- `docs`: 文档更新
- `style`: 代码格式调整（不影响功能）
- `refactor`: 代码重构
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动
- `perf`: 性能优化
- `ci`: CI/CD相关
- `build`: 构建系统相关
- `revert`: 回滚提交

### 范围 (scope) - 可选
范围用于指定提交影响的模块或组件，应该：
- 使用小写字母
- 用连字符分隔多个单词
- 根据实际项目结构调整
- 常见的范围示例：
  - `posts`: 文章相关
  - `config`: 配置文件
  - `assets`: 静态资源
  - `themes`: 主题文件
  - `layouts`: 布局文件
  - `components`: 组件相关
  - `api`: API相关
  - `ui`: 用户界面
  - `auth`: 认证相关
  - `db`: 数据库相关

### 示例
```bash
# 带范围的提交
git commit -m "feat(posts): 新增Docker学习笔记"
git commit -m "fix(config): 修复Hugo配置错误"
git commit -m "docs(posts): 更新SEO优化指南"
git commit -m "style(assets): 调整图片资源格式"

# 不带范围的提交（也是有效的）
git commit -m "feat: 新增用户认证功能"
git commit -m "fix: 修复登录页面布局问题"
git commit -m "docs: 更新API文档"
git commit -m "chore: 更新依赖包版本"

# 带详细描述的提交
git commit -m "feat(ui): 新增响应式导航栏

- 添加移动端适配
- 优化用户体验
- 支持主题切换"
```

## 2. 推送策略

### 重要原则
- **绝不自动推送**: 用户说"提交commit"时，只执行 `git commit`，不执行 `git push`
- **明确指令**: 只有当用户明确说"推送到远程"、"push到远程"等指令时，才执行推送
- **确认机制**: 推送前应该向用户确认是否真的要推送到远程仓库

### 操作流程
1. 用户要求提交 → 执行 `git commit`
2. 用户明确要求推送 → 执行 `git push`
3. 如果有未推送的commit，提醒用户是否需要推送

## 3. 多文件提交策略

### 智能分组
当 `git status` 显示多个文件修改时，应该：

1. **分析修改内容**: 理解每个文件的修改含义
2. **逻辑分组**: 将相关的修改归为一组
3. **分别提交**: 按逻辑分组进行多次commit
4. **清晰描述**: 每个commit都有明确的描述

### 分组原则
- **功能相关**: 同一功能的所有文件一起提交
- **类型相关**: 同类型的修改一起提交
- **范围相关**: 同一模块的文件一起提交

### 示例场景
```bash
# 场景：同时修改了文章内容和配置文件
# ❌ 错误做法：一次性提交所有
git commit -m "更新内容"

# ✅ 正确做法：分组提交
git commit -m "docs(posts): 更新Docker课程内容"
git commit -m "fix(config): 修复Hugo构建配置"

# 场景：修改了多个相关文件
# ❌ 错误做法：分别提交每个文件
git commit -m "fix: 修复按钮样式"
git commit -m "fix: 修复导航样式"
git commit -m "fix: 修复卡片样式"

# ✅ 正确做法：相关修改一起提交
git commit -m "style(ui): 统一界面组件样式规范"
```

## 4. 执行流程

### 提交前检查
1. 执行 `git status` 查看修改文件
2. 分析修改内容的逻辑关系
3. 确定是否需要分组提交
4. 选择合适的提交消息格式

### 提交执行
1. 使用 `git add` 添加相关文件
2. 使用规范格式的commit消息
3. 确认提交成功
4. 提醒用户是否需要推送

### 推送确认
1. 询问用户是否要推送到远程
2. 确认后执行 `git push`
3. 报告推送结果

## 5. 注意事项

- **消息简洁**: commit消息应该简洁明了，50字符以内最佳
- **中文友好**: 支持中文commit消息，但保持简洁
- **避免空提交**: 确保有实际内容变更再提交
- **分支管理**: 注意当前分支，避免误提交到错误分支
- **敏感信息**: 提交前检查是否包含敏感信息（密码、密钥等）